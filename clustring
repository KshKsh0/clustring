def group_assignment(data,centroids):
   grouping_vec_c = np.zeros(len(data))
   for i in range(len(data)):
    dist = np.zeros(len(centroids))
    for j in range(len(centroids)):
     dist[j] = np.linalg.norm(data[i] - centroids[j])
    min_dist = min(dist)
    for j in range(len(centroids)):
        if min_dist == dist[j]:
           grouping_vec_c[i] = j+1
   return grouping_vec_c


def update_centroid(data, grouping, centroids):
 new_centroids = [];
 for i in range(len(centroids)):
  cent = np.zeros(len(data[0]))
  count = 0
  for j in range(len(data)):
    if grouping[j] == (i+1):
      cent = cent+data[j]
      count += 1
  group_average = cent/count
  new_centroids.append(group_average)
  return new_centroids

def clustering_objective(data, grouping, centroids):
 J_obj = 0
 for i in range(len(data)):
     for j in range(len(centroids)):
            if grouping[i] == (j+1):
                J_obj += np.linalg.norm(data[i] - centroids[j])**2
 J_obj = J_obj/len(data)
 return J_obj


def Kmeans_alg(data, centroids):
 iteration = 0
 J_obj_vector = []
 Stop = False
 while Stop == False:
   grouping = group_assignment(data, centroids)
   new_centroids = update_centroid(data, grouping, centroids)
   J_obj = clustering_objective(data, grouping,
   new_centroids)
   J_obj_vector.append(J_obj)
   iteration += 1
   if iteration== 2 :
       Stop = True
   else:
     centroids = new_centroids
 return new_centroids, grouping, J_obj_vector, iteration

data=np.array([(0.5,1.5, 2 ,1 ),(1,0.5,2,0.5) , (2,1.5,1.5,1.5) , (0.5,1,2,2)])
cent=np.array([(0.5,1.5,2,1),(1,0.5,2,0.5) , (2,1.5,1.5,1.5)])
Kmeans_alg(data , cent)


====


def gram_schmidt(a):
 q = []
 for i in range(len(a)):
#orthogonalization
    q_tilde = a[i]
    for j in range(len(q)):
        q_tilde = q_tilde - (q[j] @ a[i])*q[j]
#Test for dependennce

    if np.sqrt(sum(q_tilde**2)) <= 1e-10:
        print('Vectors are linearly dependent.')
        print('GS algorithm terminates at iteration ', i+1)
        return q
#Normalization
    else:
     q_tilde = q_tilde / np.sqrt(sum(q_tilde**2))
     q.append(q_tilde)
 print('Vectors are linearly independent.')
 return q
